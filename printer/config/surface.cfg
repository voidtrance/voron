# Difference bed surfaces may require different Z offsets.
# Rather than having to manually set the Z offsets for every single
# bed surface, save the various offsets in to persistant user-defined
# variables.
#
# This way, the appropriate Z offset can be recalled/set by referencing
# the name of the surface being used.
#
# This file profiles macros and menu entries for working with surface
# Z offsets.
#
# (All of this should become un-necessary with Klicky and Auto-Z.)
#
# In order to define a new bed surface, the following needs to be done:
#    1. Add the bed surface name to surface_names in variables.cfg.
#    2. Add a new variable of the form:
#           surface_offsets.<surface name> = 0.000
#       in variables.cfg.
#    3. Using the macros/menu tune the Z offset for the new surface.

# Choose a bed surface from a pre-configured list
[menu __main __setup __bed_surface]
type: input
name: Bed: { printer.save_variables.variables.surface_names[menu.input|int] }
input: { printer.save_variables.variables.surface_selected }
input_min: 0
input_max: { (printer.save_variables.variables.surface_names|length) - 1 }
input_step: 1
gcode:
    SAVE_VARIABLE VARIABLE=surface_selected VALUE={menu.input|int}

# Tunes the Z offset from the setup menu, saves the offset
# can be performed while not actively printing
[menu __main __setup __offsetz]
type: input
name: Offset Z:{ '%05.3f' % menu.input }
input: { printer.save_variables.variables["surface_offsets." + printer.save_variables.variables.surface_names[printer.save_variables.variables.surface_selected]]|float }
input_min: -5
input_max: 5
input_step: 0.005
realtime: True
gcode:
    {% set vars = printer.save_variables.variables %}
    RESPOND TYPE=command MSG="{ 'bed surface: %s, offset: %r' % (vars.surface_names[vars.surface_selected], menu.input) }"
    SET_GCODE_OFFSET Z={ '%.3f' % menu.input } MOVE={ 1 if printer.toolhead.homed_axes == 'XYZ' else 0 }
    SAVE_VARIABLE VARIABLE=surface_offsets.{ vars.surface_names[vars.surface_selected] } VALUE={ '%.3f' % menu.input }

# Tunes the Z offset from the tune menu, saves the offset
[menu __main __tune __offsetz]
type: input
name: Offset Z:{ '%05.3f' % menu.input }
input: { printer.gcode_move.homing_origin.z }
input_min: -5
input_max: 5
input_step: 0.005
realtime: True
gcode:
    {% set vars = printer.save_variables.variables %}
    RESPOND TYPE=command MSG="{ 'bed surface: %s, offset: %r' % (vars.surface_names[vars.surface_selected], menu.input) }"
    SET_GCODE_OFFSET Z={ '%.3f' % menu.input } MOVE=1
    SAVE_VARIABLE VARIABLE=surface_offsets.{ vars.surface_names[vars.surface_selected] } VALUE={ '%.3f' % menu.input }

[gcode_macro SELECT_BED_SURFACE]
description: Select a bed surface to be used.
gcode:
    {% set vars = printer.save_variables.variables %}
    {% set SURFACE = params.NAME|default("default") %}

    {% if SURFACE in vars.surface_names %}
        SAVE_VARIABLE VARIABLE=surface_selected VALUE={vars.surface_names.index(SURFACE)|int}
        SET_GCODE_OFFSET Z={'%.3f' % vars['surface_offsets.' + SURFACE]} MOVE=1
    {% else %}
        { action_raise_error("Bed surface '%s' is undefined!" % SURFACE) }
    {% endif %}

[gcode_macro SET_BED_SURFACE]
description: Set the Z-offset for a bed surface. The Z-offset value will be saved for future use.
gcode:
    {% set vars = printer.save_variables.variables %}
    {% set BED_SURFACE = params.NAME|default(vars.surface_names[vars.surface_selected]) %}
    {% set Z_OFFSET    = params.OFFSET|default(printer.gcode_move.homing_origin.z)|float %}
    {% set MOVE        = params.MOVE|default(0)|int %}

    {% set OLD_Z_OFFSET = vars['surface_offsets.' + BED_SURFACE] | default("default") %}

    SAVE_VARIABLE VARIABLE=surface_selected VALUE={vars.surface.names.index(BED_SURFACE)|int}
    SAVE_VARIABLE VARIABLE=surface_offsets.{ BED_SURFACE } VALUE={ '%.3f' % Z_OFFSET }

    RESPOND TYPE=command MSG="{ 'bed surface: %s, offset: %r -> %05.3f' % (BED_SURFACE, OLD_Z_OFFSET, Z_OFFSET) }"

    SET_GCODE_OFFSET Z={ '%.3f' % Z_OFFSET } MOVE={ MOVE }