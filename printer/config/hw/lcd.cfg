########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,    # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<5V>

#####################################################################
#   Displays
#####################################################################
[display]
##  mini12864 LCD Display
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
contrast: 63
spi_software_miso_pin: EXP2_1
spi_software_mosi_pin: EXP2_6
spi_software_sclk_pin: EXP2_2
display_group: __voron_display
menu_root: __voron_main

[neopixel lcd_display]
pin: EXP1_6
chain_count: 3
color_order: RGB

[pwm_cycle_time beeper]
pin: EXP1_1
value: 0
shutdown_value: 0
cycle_time: 0.0005
scale: 1

[gcode_macro SET_LCD]
description: Set display colors
gcode:
    {% set user = printer["gcode_macro USER_VARIABLES"] %}
    {% set color_screen = params.COLOR|default(user.hw.default_color|join(","))|string %}

    # Split the params into individual colors
    {% set color_values = color_screen.split(",") %}

    {% set color = { "red" : color_values[0]|int / 255,
                     "green" : color_values[1]|int / 255,
                     "blue" : color_values[2]|int / 255} %}

    # Chain: Index 1 = knob left, Index 2 = display, Index 3 = knob right
    # If setting all LEDs to the same color, don't set INDEX and the command
    # will set the entire chain.
    SET_LED LED=lcd_display RED={color.red} GREEN={color.green} BLUE={color.blue}

[gcode_macro DISPLAY_ON]
gcode:
    SET_LCD

[gcode_macro DISPLAY_OFF]
gcode:
    SET_LCD COLOR=0,0,0

[delayed_gcode TURN_OFF_DISPLAY]
gcode:
    DISPLAY_OFF


# Glyph definition
[display_glyph chamber]
data:
    0000000000000000
    1111111111111111
    1000010000100001
    1000010000100001
    1000011111100001
    1000000000000001
    1000000000000001
    1000001111000001
    1011101001011101
    1000001111000001
    1000000110000001
    1000000000000001
    1011111111111101
    1000100000010001
    1111111111111111
    0000000000000000
    
[display_glyph voron]
data:
    1111111001111111
    1111100000011111
    1111000000001111
    1100000000000011
    1000001100110001
    1000011001100001
    1000110011000001
    1001100110000001
    1000000110011001
    1000001100110001
    1000011001100001
    1000110011000001
    1110000000000111
    1111000000001111
    1111100000011111
    1111111001111111

[display_glyph voroninv]
data:
    0000001110000000
    0000111111100000
    0001111111110000
    0111111111111100
    1111100111001110
    1111001110011110
    1110011100111110
    1100111001111110
    1111110011100110
    1111100111001110
    1111001110011110
    1110011100111110
    0111111111111100
    0001111111110000
    0000111111100000
    0000001110000000

#data:
#    0000000000000000
#    0000000000000000
#    0000000000000000
#    0000000000000000
#    0000000000000000
#    0000000000000000
#    0000000000000000
#    0000000000000000
#    0000000000000000
#    0000000000000000
#    0000000000000000
#    0000000000000000
#    0000000000000000
#    0000000000000000
#    0000000000000000
#    0000000000000000

[display_glyph network]
data:
    0000000000000000
    0000000000000000
    0000001110000000
    0000001010000000
    0000001110000000
    0000000100000000
    0000000100000000
    0000000100000000
    0011111111111000
    0010000100001000
    0010000100001000
    0111001110011100
    0101001010010100
    0111001110011100
    0000000000000000
    0000000000000000

[display_glyph ipaddr]
data:
    0000000000000000
    0000011111100000
    0001100000011000
    0110000000000110
    1000111001110001
    1000010001001001
    1000010001110001
    1000010001000001
    0100111001000010
    0010000000000100
    0001000000001000
    0000100000010000
    0000010000100000
    0000001001000000
    0000000110000000
    0000000000000000

[display_glyph wifi]
data:
    0000000000000000
    0000000000000000
    0000000000000000
    0000000000000000
    0000001110000000
    0001110001110000
    1110000000001110
    0000000000000000
    0000001110000000
    0001110001110000
    0000000000000000
    0000000000000000
    0000001110000000
    0000000000000000
    0000000000000000
    0000000000000000

# Display Data definition
[display_template _vheater_temperature]
param_heater: "extruder"
text:
  {% if param_heater in printer %}
    # Show glyph
    {% if param_heater == "heater_bed" %}
      {% if printer[param_heater].target %}
        {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
        ~bed_heat{frame}~
      {% else %}
        ~bed~
      {% endif %}
    {% else %}
      ~extruder~
    {% endif %}
    # Show temperature
    { "%3.0f" % (printer[param_heater].temperature,) }
    # Optionally show target
    {% if printer[param_heater].target and (printer[param_heater].temperature - printer[param_heater].target)|abs > 2 %}
      ~right_arrow~
      { "%0.0f" % (printer[param_heater].target,) }
    {% endif %}
    ~degrees~
  {% endif %}

[display_data __voron_display extruder]
position: 0, 0
text: { render("_vheater_temperature", param_heater="extruder") }

[display_data __voron_display fan]
position: 0, 10
text:
  {% if 'fan' in printer %}
    {% set speed = printer.fan.speed %}
    {% if speed %}
      {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
      ~fan{frame}~
    {% else %}
      ~fan1~
    {% endif %}
    { "{:>4.0%}".format(speed) }
  {% endif %}

[display_data __voron_display bed]
position: 1, 0
text: { render("_vheater_temperature", param_heater="heater_bed") }

[display_data __voron_display progress_text]
position: 1, 10
text:
  {% set progress = printer.virtual_sdcard.progress %}
  { "{:^6.0%}".format(progress) }
  
[display_data __voron_display progress_text2]
position: 1, 10
text:
  {% set progress = printer.virtual_sdcard.progress %}
  { draw_progress_bar(1, 10, 6, progress) }

[display_data __voron_display chamber]
position: 2, 0
text:
   ~chamber~
   { "%3.0f" % printer["temperature_sensor chamber"].temperature }
   ~degrees~

[display_data __voron_display printing_time]
position: 2, 8
text:
  {% if printer.print_stats.state in ("printing", "paused") %}
    {% set ptime = printer.print_stats.total_duration %}
    { "%2d:%02d:%02d" % (ptime // (60 * 60), (ptime // 60) % 60, (ptime % 60)) }
  {% endif %}

[display_data __voron_display print_status]
position: 3, 0
text: 
  {% if printer.display_status.message %}
    { printer.display_status.message }
  {% elif printer.idle_timeout.printing_time|int != 0 %}
    {% set pos = printer.motion_report.live_position %}
    { "X%-4.0fY%-4.0fZ%-5.2f" % (pos.x, pos.y, pos.z) }
  {% else %}
    { "V2.2839       " }
	~voroninv~
  {% endif %}
