# Tunning and debugging macros
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(20)|int %}
	
	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
	G28
	# QGL if not already QGLd (only if QGL section exists in config)
	{% if printer.configfile.settings.quad_gantry_level %}
		{% if printer.quad_gantry_level.applied == False %}
			QUAD_GANTRY_LEVEL
			G28 Z
		{% endif %}
	{% endif %}	
	G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
	G4 P1000 
	GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		# Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		
		# Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home XY and get position again for comparison:
	G28 X Y
	# Go to XY home positions (in case your homing override leaves it elsewhere)
	G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
	G4 P1000 
	GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro NOISE_TEST]
gcode:
    {% set axis_limits = printer.toolhead.axis_maximum %}

    # Define SPEED range
    {% set speed_start = params.SPEED_START|int %}
    {% set speed_end = params.SPEED_END|default(speed_start)|int %}
    {% set speed_step = params.SPEED_STEP|default(10)|int %}
    
    # Define X position range
    {% set x_start = params.X_START|default(axis_limits.x//2)|int %}
    {% set x_end = params.X_END|default(x_start)|int %}
    {% set x_step = params.X_STEP|default(10)|int %}

    # Define Y position range
    {% set y_start = params.Y_START|default(axis_limits.y//2)|int %}
    {% set y_end = params.Y_END|default(y_start)|int %}
    {% set y_step = params.Y_STEP|default(10)|int %}

    # Define additional parameters
    {% set iterations = params.ITERS|default(10)|int %}
    {% set x_distance = params.X_DIST|default(2)|int %}
    {% set y_distance = params.Y_DIST|default(2)|int %}

    # Don't allow range ends be greater than the printer's limits
    {% set x_start = [0, x_start]|max %}
    {% set x_end = [x_end, axis_limits.x]|min %}
    {% set y_start = [0, y_start]|max %}
    {% set y_end = [y_end, axis_limits.y]|min %}
    {% set speed_end = [speed_end, printer.configfile.settings.printer.max_velocity]|min %}

    SAVE_GCODE_STATE NAME=noise_test

	# Home and get position for comparison later:
    {% if printer.toolhead.homed_axis != "xyz" %}
      G28
    {% endif %}

	# QGL if not already QGLd (only if QGL section exists in config)
	{% if printer.configfile.settings.quad_gantry_level %}
		{% if printer.quad_gantry_level.applied == False %}
			QUAD_GANTRY_LEVEL
			G28 Z
		{% endif %}
	{% endif %}	

    G90
    G0 Z30 F3600

    {% for reset_x in range(x_start, x_end + 1, x_step) %}
      {% for reset_y in range(y_start, y_end + 1, y_step) %}
        G90
        # Go to test position
        G0 X{reset_x} Y{reset_y} F3600
        # Relative positioning
        G91
        
        {% for speed in range(speed_start, speed_end+1, speed_step) %}
          M117 Testing speed {speed} @ {reset_x}X{reset_y}...

          # Set the speed for all subsequent moves
          G0 F{speed * 60}

          # X motion
          {% for i in range(iterations) %}
              # Left-right moves
              G0 X{x_distance}
              G0 X{x_distance * -1}
          {% endfor %}

          # Y motion
          {% for i in range(iterations) %}
              G0 Y{y_distance}
              G0 Y{y_distance * -1}
          {% endfor %}

          # Diagonal
          {% for x in [1, -1] %}
            {% for y in [1, -1] %}
              {% for i in range(iterations) %}
                G0 X{x_distance * x} Y{y_distance * y}
                G0 X{x_distance * x * -1} Y{y_distance * y * -1}
              {% endfor %}
            {% endfor %}
          {% endfor %}

          # Diagonal step
          {% set step_iters_x = axis_limits.x // x_distance %}
          {% set step_iters_y = (axis_limits.y - 5) // y_distance %}
          {% for sx in [0, axis_limits.x] %}
            {% for xy in [0, (axis_limits.y - 5)] %}
              G90
              G0 X{sx} Y{sy} F3600
              G91
              G0 F{speed * 60}
              {% for x in range(0, [step_iters_x, step_iters_y]|min) %}
                G0 X{x_distance * (1 if sx else -1)}
                G0 Y{y_distance * (1 if sy else -1)}
              {% endfor %}
            {% endfor %}
          {%endfor %}

          CLEAR_DISP
        {% endfor %}
      {%endfor %}
    {% endfor %}

    G28 X Y
    RESTORE_GCODE_STATE NAME=noise_test