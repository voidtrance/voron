#####################################################################
#   Macros
#####################################################################
[delayed_gcode __CLEAR_DISP]
gcode:
    M117

[gcode_macro CLEAR_DISP]
gcode:
    {% set delay = params.TIMEOUT|default(0)|int %}

    {% if delay == 0 %}
      M117
    {% else %}
      UPDATE_DELAYED_GCODE ID=__CLEAR_DISP DURATION={delay}
    {% endif %}

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    # Set macro parameters.
    # Use a namespace so modification of parameters inside loops is
    # possible.
    {% set args = namespace(bed=params.BED|int,
                            hotend=params.EXTRUDER|int,
                            filament=params.FTYPE|string,
                            filament_id=params.FILAMENT_ID|default(0)|int,
                            chamber=params.CHAMBER|default(0)|int,
                            bedmesh=params.BEDMESH|default(0)|int,
                            soak_time=params.DELAY|default(0)|int) %}

    # Shorthand for the axis limits.
    {% set axis_limits = printer.toolhead.axis_maximum %}
    # User-defined variables.
    {% set user_vars = printer["gcode_macro USER_VARIABLES"] %}
    # Persistant user variables.
    {% set saved_vars = printer.save_variables.variables %}

    # Explicitly set positioning to absolute. This is done in case
    # the printer is somehow left in relative mode. In such cases,
    # operations below may cause issues.
    G90

    # Reset the speed to 100%
    M220 S100
    M221 S100

    BED_MESH_CLEAR

    # Initial homing of all axes
    G28

    # Set and wait for bed temperature
    M190 S{args.bed}

    # Per-filament type settings.
    # This should be done prior to QGL and/or bedmesh since
    # filament settings may include heating the chamber and/or
    # heat-soaking.
    {% if args.filament == "PLA" %}
    {% elif args.filament == "ABS" %}
        SET_CHAMBER_TEMP TEMP={args.chamber} DELAY={args.soak_time}
    {% endif %}

    # QGL if not already QGL'd
    {% if printer.configfile.settings.quad_gantry_level %}
      {% if printer.quad_gantry_level.applied == False %}
        QUAD_GANTRY_LEVEL
        G28 Z
      {% endif %}
    {% endif %}

    # Conditionally create a heightmap. Creating a heightmap leads to a better
    # first layer but is not always necessary.
    {% if args.bedmesh %}
        M117 Running bedmesh...
        BED_MESH_CALIBRATE
        CLEAR_DISP
    {% endif %}

    # Move the toolhead to the front of the bed, high up to
    # aid in ooze removal. Once, there is a purge bucket and
    # a nozzle wipe, this can be replaced by that code.
    G0 X{axis_limits.x//2} Y20 Z100 F7200

    # Finally, heat up the extruder to desired temperature
    M109 S{args.hotend}

    # Final homing.
    # Do this with a hot nozzle (for now) in order to squish any last filament out.
    G28

    # Enable filament sensor during print
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1


[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    {% set th = printer.toolhead %}
    {% set user_vars = printer["gcode_macro USER_VARIABLES"] %}

    # safe anti-stringing move coords
    {% set x_safe = th.position.x + 20 * (1 if user_vars.hw.volume.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if user_vars.hw.volume.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, user_vars.hw.volume.z]|min %}

    # Define park position
    {% set x_park = user_vars.macros.park_position.print_end.x %}
    {% set y_park = user_vars.macros.park_position.print_end.y %}
    {% set z_park = [th.position.z + 20, user_vars.hw.volume.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-3.0 F3600                 ; retract filament

    # Turn off the bed heater but leave the extruder for some time.
    # This lets the filament ooze out after the print so it doesn't
    # ooze on the next print start.
    M140 S0

    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{x_park} Y{y_park} Z{z_park} F3600   ; park nozzle at rear

    # Wait for 60s to let the filament ooze out.
    G4 P60000

    # Now, turn all heaters off.
    TURN_OFF_HEATERS

    # restore speed and accel limits modified during the print
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
	  SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
	  SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
	  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity}
    
    # Reset speed and extrusion factors
    M220 S100
    M221 S100
    
    BED_MESH_CLEAR

    # Disable filament sensor after print is done.
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
    
    M117 Print done.
    CLEAR_DISP TIMEOUT=10

    # Play some tones to signal print end
    M300 S440 P200
    M300 S660 P250
    M300 S880 P300
    M300 S220 P450
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro SET_CHAMBER_TEMP]
description: Reach a set temperature in chamber and wait for set time to allow for heat expansion.
gcode:
    {% set temp = params.TEMP|int %}
    {% set delay = params.DELAY|default(0)|int %}
    {% set user_vars = printer["gcode_macro USER_VARIABLES"] %}

    {% if "temperature_sensor chamber" in printer.heaters.available_sensors %}
      {% set sensor = printer["temperature_sensor chamber"] %}
      {% set using_head = False %}
    {% else %}
      {% set sensor = printer.extruder %}
      {% set using_head = True %}
    {% endif %}

    SAVE_GCODE_STATE NAME=set_chamber_temp
    {% if "xyz" not in printer.toolhead.homed_axes %}
      G28
    {% endif %}

    # Set absolute positioning
    G90

    # If a chamber temperature is set, wait for it to be reached.
    # Measuring chamger temp is done by either using a chamber temp
    # sensor (if one exists) or by using the extruder sensor.
    {% if temp > 0 %}
      M117 Waiting for chamber temp...
      {% if using_head %}
        # Move the toolhead to half of Z-max and wait for chamber temp.
        # The position of the toolhead is chosen so it is not right above
        # the hot bed but also not at the top, where the hot air will rise
        # and settle. Not sure if this is the best position.
        G0 X{user_vars.hw.volume.x//2} Y{user_vars.hw.volume.y//2} Z{(user_vars.hw.volume.z//3)*2} F7200
      {% endif %}

      # Turn on part cooling fan to circulate the air
      M106 S255

      # Wait for traget temperature to be reached.
      TEMPERATURE_WAIT SENSOR={"extruder" if using_head else '"temperature_sensor chamber"'} MINIMUM={temp}
      CLEAR_DISP

      {% if delay %}
        M117 Waiting for {delay} seconds...
        G4 P{delay|float * 1000.0}
        CLEAR_DISP
      {% endif %}

      M106 S0
    {% endif %}

    RESTORE_GCODE_STATE NAME=set_chamber_temp

[gcode_macro SET_PRESSURE_ADVANCE]
description: Set pressure advance parameters for extruder.
rename_existing: BASE_SET_PRESSURE_ADVANCE
gcode:
    {% set extruder = params.EXTRUDER|default("")|string %}
    {% set advance = params.ADVANCE|default(0.0)|float %}
    {% set smooth_time = params.SMOOTH_TIME|default(0.0)|float %}
    {% set filament = params.FILAMENT_ID|default(0)|int %}
    {% set filament_type = params.FILAMENT_TYPE|default("")|string %}
    {% set user_vars = printer["gcode_macro USER_VARIABLES"] %}

    {% set cmd = [] %}
    {% set _dummy = cmd.append("EXTRUDER=%s" % extruder) if extruder %}
    {% if not advance %}
      {% if filament %}
        {% if filament in user_vars.filament.brands %}
          {% set advance = user_vars.filament.brands[filament].pa %}
        {% else %}
          {% set type_code = filament // 1000000 %}
          {% set type = user_vars.filament.map[type_code] %}
          {% if type in user_vars.filament.defaults.pa %}
            {% set advance = user_vars.filament.defaults.pa[type] %}
          {% endif %}
        {% endif %}
      {% elif filament_type %}
        {% if filament_type in user_vars.filament.defaults.pa %}
          {% set advance = user_vars.filament.defaults.pa[filament_type] %}
        {% endif %}
      {% endif %}
    {% endif %}

    {% set _dummy = cmd.append("ADVANCE=%s" % advance) if advance %}
    {% set _dummy = cmd.append("SMOOTH_TIME=%s" % smooth_time) if smooth_time %}
    BASE_SET_PRESSURE_ADVANCE {cmd|join(" ")}

#
# Parametric PRIME LINE macro.
#
# Purges a set amounf of filament, then prints a nozzle priming line at the front of the bed.
# Calculates plastic flow and line size automatically based on nozzle diameter and bed size.
#
# Most of the apects of how it does things are configurable, see the "params.SOMETHING" lines in the code below.
# Full list of accepted parameters and their default values below. All of them are optional and do not have to be specified if you don't want the values changed:
#
#  PRIME_LINE
#  PRIME_LINE XPAD=0 YPAD=0 LENGTH=150 PRINT_SPEED=30 TRAVEL_SPEED=200 PURGE=8 RETRACT=1 EXTRUSION_MULTIPLIER=1.25 PRINT_HANDLE=1 HANDLE_FAN=35
#
# Careful: prints close to bed. Make sure your z-offset is correctly set and your bed mesh loaded, otherwise
# you can damage your print surface.
#
# Version 1.2
#
[gcode_macro PRIME_LINE]
description: Print an easy to remove parametric extruder priming line with a built-in handle.
gcode:
    # settings
    {% set line = {
      'x_padding'      : params.XPAD|default(0)|float,  # left/right padding around the bed the line can't print into
      'y_padding'      : params.YPAD|default(0)|float,  # top/bottom padding around the bed the line can't print into
      'initial_purge'  : params.PURGE|default(8)|int,   # mm of filament to purge before printing. set to 0 to disable
      'retract_after'  : params.RETRACT|default(1)|int, # mm of filament to recract after printing. set to 0 to disable
      'length'         : params.LENGTH|default(150)|int,
      'print_speed'    : params.PRINT_SPEED|default(30)|int,
      'travel_speed'   : params.TRAVEL_SPEED|default(200)|int,
      'extr_multi'     : params.EXTRUSION_MULTIPLIER|default(1.25)|float,  # apply to prime lines
      'overlap_percent': 80, # how much prime lines overlap each other
    } %}
    {% set handle = {
      'do_print'    : params.PRINT_HANDLE|default(1)|int,  # set to 0 to disable printing the handle
      'fan_percent' : params.HANDLE_FAN|default(40)|int,   # without fan the handle is too small and melty to print upright
      'width'       : 5.0,
      'height'      : 5.0,
      'move_away'   : 60   # how much to move the toolhead away from the printed handle once done. set 0 to disable
    } %}

    # sanity check and computed variables
    {% set max_x, max_y, nozzle_diameter = printer.toolhead.axis_maximum.x|float, printer.toolhead.axis_maximum.y|float, printer.configfile.config['extruder'].nozzle_diameter|float %}
    {% set _ = line.update({'width': nozzle_diameter * 1.25, 'height': nozzle_diameter / 2, 'length': [line.length, max_x - 2 * line.x_padding - 2]|min}) %}
    {% set _ = line.update({'e_per_mm': line.extr_multi * (line.width * line.height) / (3.1415 * (1.75/2)**2), 'x_start': max_x / 2 - line.length / 2, 'y_start': line.y_padding + range(0,5)|random})  %}

    SAVE_GCODE_STATE NAME=STATE_PRIME_LINE

    M117 Prime Line
    G90 # absolute positioning
    G0 X{line.x_start} Y{line.y_start + (handle.width / 2)|int + 1} Z{line.height} F{line.travel_speed * 60} # move to starting position
    G91 # relative positioning
    G1 E{line.initial_purge} F{5 * 60} # extrude at ~12mm3/sec
    G0 F{line.print_speed * 60} # set print speed
    G1 X{line.length} E{line.length * line.e_per_mm} # print forward line
    G0 Y{line.width * line.overlap_percent / 100} # overlap forward line
    G1 X-{line.length / 2} E{(line.length / 2) * line.e_per_mm}  # print backward line for half the length

    # print a handle for easy removal
    {% if handle.do_print != 0 and handle.width != 0 and handle.height != 0 %}
      G0 X{line.length / 2 - handle.width} Y{handle.width / 2} F{line.travel_speed * 60} # move into position for printing handle
      G0 F{line.print_speed * 60} # set print speed
      {% set saved_fan_speed = (printer['fan'].speed * 256)|int %}
      M106 S{((handle.fan_percent / 100) * 256)|int} # set part fan to desired speed
      {% for _ in range((line.height * 1000)|int, (handle.height * 1000)|int, (line.height * 1000)|int) %} # loop however many cycles it takes to print required handle height
        G1 Y{loop.cycle(-1.0, 1.0) * handle.width} E{handle.width * line.e_per_mm} # handle layer
        G0 X-{line.width * 0.2} Z{line.height} # move up and shift the layer to make the handle sloping
      {% endfor %}
      M106 S{saved_fan_speed} # restore previous part fan speed
    {% endif %}
    
    G1 E-{line.retract_after} F{50 * 60} # retract ar 50mm/sec after printing
    G0 Y{handle.move_away} F{line.travel_speed * 60}
    M117

    RESTORE_GCODE_STATE NAME=STATE_PRIME_LINE

[gcode_macro CLEAR_BED]
description: Move toolhead away from bed
gcode:
    {% set user_vars = printer["gcode_macro USER_VARIABLES"] %}

    SAVE_GCODE_STATE NAME=clear_bed
    G90
    G0 X{user_vars.macros.park_position.bed_clear.x} Y{user_vars.macros.park_position.bed_clear.y} Z{user_vars.macros.park_position.bed_clear.z} F3600
    RESTORE_GCODE_STATE NAME=clear_bed

[gcode_macro LOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=load
    M83
    G1 E40  F350
    G1 E30  F350
    G1 E30 F300
    G1 E-1.7 F1500
    M117 LOAD Complete
    CLEAR_DISP TIMEOUT=10
    RESTORE_GCODE_STATE NAME=load

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set DISTANCE = params.DISTANCE|default(49)|float %}
    M400
    SAVE_GCODE_STATE NAME=unload_state
    M117 Unloading...
    M82    ;Absolute extrusion
    G92 E0
    G1 E2 F3600
    G1 E0 F3600
    G1 E4 F3600
    G1 E0 F3600
    G1 E8 F3600
    G1 E0 F3600
    M83                  ;Relative extrusion
    G1 E-25 F3600
    G4 P3000
    G1 E{DISTANCE * -1} F3000
    M82 ; Absolute extrusion
    M400
    M117 Done!
    CLEAR_DISP TIMEOUT=10
    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro CHANGE_FILAMENT]
gcode:
    {% set TEMP = params.TEMP|int %}
    {% set user_vars = printer["gcode_macro USER_VARIABLES"] %}
    {% set position = namespace(x=user_vars.macros.park_position.filament_change.x,
                                y=user_vars.macros.park_position.filament_change.y,
                                z=user_vars.macros.park_position.filament_change.z) %}
    SAVE_GCODE_STATE NAME=change_filament

    {% if printer.pause_resume.is_paused %}
      {% if printer.toolhead.position.z > 100 %}
        {% set position.z = printer.toolhead.position %}
      {% endif %}
    {% else %}
      {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
      {% endif %}
    {% endif %}
    G90
    G0 X{position.x} Y{position.y} Z{position.z} F8000
    M109 S{TEMP}

    RESTORE_GCODE_STATE NAME=change_filament

[gcode_macro M300]
description: Play tone
gcode:  
    {% set S = params.S|default(1000)|int %} ; S sets the tone frequency
    {% set P = params.P|default(100)|int %} ; P sets the tone duration
    {% set L = 0.5 %} ; L varies the PWM on time, close to 0 or 1 the tone gets a bit quieter. 0.5 is a symmetric waveform
    {% if S <= 0 %} ; dont divide through zero
      {% set F = 1 %}
      {% set L = 0 %}
    {% elif S >= 10000 %} ;max frequency set to 10kHz
      {% set F = 0 %}
    {% else %}
      {% set F = 1/S|float %} ;convert frequency to seconds 
    {% endif %}
    SET_PIN PIN=beeper VALUE={L} CYCLE_TIME={F} ;Play tone
    G4 P{P} ;tone duration
    SET_PIN PIN=beeper VALUE=0

[gcode_macro BEEP]
gcode:
  {% set count = params.COUNT|default(1)|int %}

  {% for i in range(count) %}
    M300
    G4 P50
  {% endfor %}