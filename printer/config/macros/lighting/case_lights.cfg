[neopixel case_lights]
pin: PB6
chain_count: 45
color_order: GRB


# Enable LED fade command
[led_interpolate]

[gcode_macro SET_CASE]
description: Set case lights colors and brightness
gcode:
    {% set user = printer["gcode_macro USER_VARIABLES"] %}
    {% set color = params.COLOR|default(user.hw.default_color|join(","))|string %}

    # Split the params into individual colors
    {% set color = color.split(",") %}

    {% set values = {"red" : (color[0]|int / 255),
                     "green" : color[1]|int / 255,
                     "blue" : color[2]|int / 255} %}

    SET_LED LED=case_lights RED={values.red} GREEN={values.green} BLUE={values.blue}
    
[gcode_macro CASELIGHTS]
description: Change case lights state.
variable_value: 0
gcode:
    {% set state = params.STATE|string|upper %}

    {% if state == 'ON' %}
        SET_CASE COLOR=255,255,255
        SET_GCODE_VARIABLE MACRO=CASELIGHTS VARIABLE=value VALUE=1
    {% elif state == 'OFF' %}
        SET_CASE COLOR=0,0,0
        SET_GCODE_VARIABLE MACRO=CASELIGHTS VARIABLE=value VALUE=0
    {% elif state == 'DIM' %}
        {% set vars = printer.save_variables.variables %}
        {% set user = printer["gcode_macro USER_VARIABLES"] %}
        {% if "caselights_ambient" in vars and vars.caselights_ambient|length != 0 %}
            {% set color = vars.caselights_ambient %}
        {% else %}
            {% set color = user.hw.default_color %}
        {% endif %}
        # Dim color is 20% brightness of the default color
        {% set color = [(color[0] * 0.2) / 255, (color[1] * 0.2) / 255, (color[2] * 0.2) / 255] %}

        LED_INTERPOLATE LED=case_lights RED={color[0]} GREEN={color[1]} BLUE={color[2]} FACTOR=0.15
        SET_GCODE_VARIABLE MACRO=CASELIGHTS VARIABLE=value VALUE=2
    {% else %}
        {action_respond_info('Unknown case light state %s' % state)}
    {% endif %}

[delayed_gcode CASELIGHT_DELAYED]
gcode:
    {% set user_vars = printer["gcode_macro USER_VARIABLES"] %}
    CASELIGHTS STATE={user_vars.hw.case_light_states[printer["gcode_macro CASELIGHTS_SHOW"].prev_state]}

[gcode_macro CASELIGHTS_SHOW]
description: Turn the case lights on for a short period of time
variable_timeout: 30
variable_default_timeout: 30
variable_prev_state: -1
gcode:
    {% set timeout = params.TIMEOUT|default(0)|int %}

    {% if timeout == 0 %}
        {% set timeout = printer["gcode_macro CASELIGHTS_SHOW"].timeout %}
    {% endif %}

    # Record the current state of the case lights.
    # This is needed in the [delayed_gcode CASELIGHT_DELAYED] in order
    # to restore the light to their previous state.
    SET_GCODE_VARIABLE MACRO=CASELIGHTS_SHOW VARIABLE=prev_state VALUE={printer["gcode_macro CASELIGHTS"].value}

    # Turn the case lights and schedule the delayed gcode.
    CASELIGHTS STATE='ON'
    UPDATE_DELAYED_GCODE ID=CASELIGHT_DELAYED DURATION={timeout}

    # Restore the default timeout.
    SET_GCODE_VARIABLE MACRO=CASELIGHTS_SHOW VARIABLE=timeout VALUE={printer["gcode_macro CASELIGHTS_SHOW"].default_timeout}
