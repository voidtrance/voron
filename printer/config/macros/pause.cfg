[pause_resume]

[gcode_macro PAUSE]
rename_existing: _BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %} ; z hop amount
    {% set extruder_off = params.EXTRUDER_OFF|default(1)|int %}
    {% set th = printer.toolhead %}
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        # Set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
        # Set hotend temp variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                
        # Disable filament sensor
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
        # Save current print position for resume
        SAVE_GCODE_STATE NAME=PAUSE
        # Pause print
        _BASE_PAUSE
        # Check that zhop doesn't exceed z max
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
            # Relative positioning
            G91
            # Raise Z up by z hop amount
            G1 Z{z} F900
        {% else %}
            # If z max is exceeded, show message and set zhop value for resume
            # to 0
            { action_respond_info("Pause zhop exceeds maximum Z height.") }
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        # Absolute positioning
        G90
        # Park toolhead at front center
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
        # Save parked position in case toolhead is moved during the pause
        # (otherwise the return zhop can error)
        SAVE_GCODE_STATE NAME=PAUSEPARK
        {% if extruder_off %}
            # Turn off hotend
            M104 S0
        {% endif %}
        # Set timeout to 12 hours
        SET_IDLE_TIMEOUT TIMEOUT=43200
    {% endif %}

[gcode_macro RESUME]
rename_existing: _BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        # Enable filament sensor
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
        # Set timeout back to configured value
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
        {% if etemp > 0 %}
            # Wait for hotend to heat back up
            M109 S{etemp|int}
        {% endif %}
        # Go back to parked position in case toolhead was moved during pause
        # (otherwise the return zhop can error)
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
        # Relative positioning
        G91
        # Relative extruder positioning
        M83
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            # Prime nozzle by E, lower Z back down
            G1 Z{zhop * -1} E{e} F900
        {% else %}
            # Lower Z back down without priming (just in case we are testing the
            # macro with cold hotend)
            G1 Z{zhop * -1} F900
        {% endif %}                             
        # Restore position
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
        # Resume print
        _BASE_RESUME
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: _BASE_CANCEL_PRINT
gcode:
    # Set timeout back to configured value
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    _BASE_CANCEL_PRINT