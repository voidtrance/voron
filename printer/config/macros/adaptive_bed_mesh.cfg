[gcode_shell_command DO_ADAPTIVE_BED_MESH]
value_min_mesh: 0,0
value_max_mesh: 0,0
value_probe_count: 0,0
value_algorithm: "lagrange"
verbose: True
timeout:30
command: ~/moonraker-env/bin/python /home/pi/tools/adaptive_bed_mesh.py
success:
    BED_MESH_CALIBRATE MESH_MIN={min_mesh} MESH_MAX={max_mesh} PROBE_COUNT={probe_count} ALGORITHM={algorithm}
failure:
    # Perform the stock bedmesh if adaptive bed mesh processing failed.
    BED_MESH_CALIBRATE

[gcode_macro ADAPTIVE_BED_MESH_CALIBRATE]
gcode:
    {% set gcode_file = printer.virtual_sdcard.file_path %}
    {% set bed_mesh = printer.configfile.config.bed_mesh %}
    {% set user_vars = printer["gcode_macro USER_VARIABLES"] %}

    # Sanitize arguments
    {% set mesh_min = bed_mesh.mesh_min.split(',')|map('trim')|join(',') %}
    {% set mesh_max = bed_mesh.mesh_max.split(',')|map('trim')|join(',') %}
    {% set probe_count = bed_mesh.probe_count.split(',')|map('trim')|join(',') %}
    {% set algorithm = bed_mesh.algorithm|trim %}

    # Set all script parameters
    {% set script_params = ["--size=%s,%s" % (user_vars.hw.volume.x, user_vars.hw.volume.y)] %}
    {% set _ = script_params.append("--mesh_min=%s" % mesh_min) %}
    {% set _ = script_params.append("--mesh_max=%s" % mesh_max) %}
    {% set _ = script_params.append("--probe=%s" % probe_count) %}
    {% set _ = script_params.append("--algo=%s" % algorithm) %}
    {% set script_params = script_params|join(" ") %}

    RUN_SHELL_COMMAND CMD=DO_ADAPTIVE_BED_MESH PARAMS="{script_params} '{gcode_file}'"