#####################################################################
#   Macros
#####################################################################
[delayed_gcode __CLEAR_DISP]
gcode:
    M117

[gcode_macro CLEAR_DISP]
description: Clear display with optional timeout.
gcode:
    {% set delay = params.TIMEOUT|default(0)|int %}

    {% if delay == 0 %}
      M117
    {% else %}
      UPDATE_DELAYED_GCODE ID=__CLEAR_DISP DURATION={delay}
    {% endif %}

[gcode_macro PRINT_START]
description: Macro to setup the print job.
gcode:
    # Set macro parameters.
    # Use a namespace so modification of parameters inside loops is
    # possible.
    {% set args = namespace(bed=params.BED|int,
                            hotend=params.EXTRUDER|int,
                            filament=params.FTYPE|default("")|string,
                            filament_id=params.FILAMENT_ID|default(0)|int,
                            chamber=params.CHAMBER|default(0)|int,
                            bedmesh=params.BEDMESH|default(0)|int,
                            soak_time=params.DELAY|default(0)|int,
                            scrub_temp=180,
                            nevermore_default=35) %}

    # Shorthand for the axis limits.
    {% set axis_limits = printer.toolhead.axis_maximum %}
    # User-defined variables.
    {% set user_vars = printer["gcode_macro USER_VARIABLES"] %}
    # Persistant user variables.
    {% set saved_vars = printer.save_variables.variables %}

    # If a filament ID has been passed in, extract the filament type from it.
    # FILAMENT_ID always overrides FTYPE.
    {% if args.filament_id %}
      {% set args.filament = user_vars.filament.map[(args.filament_id // 1000000)] %}
    {% endif %}

    CASELIGHTS STATE='ON'
    
    # Explicitly set positioning to absolute. This is done in case
    # the printer is somehow left in relative mode. In such cases,
    # operations below may cause issues.
    G90

    # Reset the speed to 100%
    M220 S100
    M221 S100

    BED_MESH_CLEAR

    # Initial homing of all axes
    {% if printer.toolhead.homed_axes != "xyz" %}
      G28
    {% endif %}

    {% if args.filament in ("ABS", "ASA") %}
      NEVERMORE_CTRL SPEED={args.nevermore_default}
    {% endif %}

    # Set and wait for bed temperature
    M190 S{args.bed}

    # Per-filament type settings.
    # This should be done prior to QGL and/or bedmesh since
    # filament settings may include heating the chamber and/or
    # heat-soaking.
    {% if args.filament == "PLA" %}
    {% elif args.filament == "ABS" or args.filament == "ASA" %}
      HEAT_SOAK_UNINTERRUPTIBLE TARGET={args.chamber} DURATION={args.soak_time}
      # Reduce filter to 35% while printing.
      NEVERMORE_CTRL SPEED={args.nevermore_default}
    {% endif %}

    # Pre-heat the nozzle to soften any filament so it can be cleaned.
    M104 S{args.scrub_temp}
    TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={args.scrub_temp}
    CLEAN_NOZZLE

    # QGL if not already QGL'd
    {% if printer.configfile.settings.quad_gantry_level %}
      {% if printer.quad_gantry_level.applied == False %}
        QUAD_GANTRY_LEVEL
        G28 Z
      {% endif %}
    {% endif %}

    # Conditionally create a heightmap. Creating a heightmap leads to a better
    # first layer but is not always necessary.
    {% if args.bedmesh %}
        M117 Running bedmesh...
        ADAPTIVE_BED_MESH_CALIBRATE
        CLEAR_DISP
    {% endif %}

    # Finally, heat up the extruder to desired temperature
    M109 S{args.hotend}

    # Clean nozzle before final homing
    CLEAN_NOZZLE

    # Final homing.
    # Do this with a hot nozzle (for now) in order to squish any last filament out.
    G28

    # Adjust per-filament Z-offset
    {% if args.filament_id in user_vars.filament.brands %}
      {% if "z_offset" in user_vars.filament.brands[args.filament_id] %}
        SET_GCODE_OFFSET Z_ADJUST={user_vars.filament.brands[args.filament_id].z_offset} MOVE=1
      {% endif %}
    {% elif args.filament in user_vars.filament.defaults.z_offset %}
      SET_GCODE_OFFSET Z_ADJUST={user_vars.filament.defaults.z_offset[args.filament]} MOVE=1
    {% endif %}

    # Enable filament sensor during print
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1


[gcode_macro PRINT_END]
gcode:
    {% set args = namespace(filament=params.FTYPE|default("")|string,
                            filament_id=params.FILAMENT_ID|default(0)|int) %}
    {% set th = printer.toolhead %}
    {% set user_vars = printer["gcode_macro USER_VARIABLES"] %}

    # Define some constants
    {% set nozzle_ooze_wait_time = 60 %}  ; in seconds
    {% set nevermore_speed = 100 %}       ; percent
    {% set nevermore_time = 3 %}          ; minutes
    {% set vefach_speed = 50 %}           ; percent
    {% set vefach_filter_time = 5 %}      ; in minutes

    # If a filament ID has been passed in, extract the filament type from it.
    # FILAMENT_ID always overrides FTYPE.
    {% if args.filament_id %}
      {% set args.filament = user_vars.filament.map[(args.filament_id // 1000000)] %}
    {% endif %}

    # safe anti-stringing move coords
    {% set x_safe = th.position.x + 20 * (1 if user_vars.hw.volume.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if user_vars.hw.volume.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, user_vars.hw.volume.z]|min %}

    # Define park position
    {% set x_park = user_vars.macros.park_position.print_end.x %}
    {% set y_park = user_vars.macros.park_position.print_end.y %}
    {% set z_park = [th.position.z + 20, user_vars.hw.volume.z]|min %}
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-3.0 F3600                 ; retract filament

    {% if args.filament == "ABS" or args.filament == "ASA" %}
      # Start filtering the chamber.
      # We don't use the FILTER_CHAMBER macro because that will block waiting
      # for the chamber to drop to a target temperature. We want to be able to
      # do other things in the meantime.
      NEVERMORE_CTRL SPEED={nevermore_speed}
    {% endif %}

    # Turn off the bed heater but leave the extruder for some time.
    # This lets the filament ooze out after the print so it doesn't
    # ooze on the next print start.
    M140 S0

    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{x_park} Y{y_park} Z{z_park} F3600   ; park nozzle at rear

    # Wait to let the filament ooze out.
    G4 P{nozzle_ooze_wait_time * 1000}

    # Clean the nozzle from any oozing.
    CLEAN_NOZZLE

    # Now, turn all heaters off.
    TURN_OFF_HEATERS

    {% if args.filament == "ABS" or args.filament == "ASA" %}
      # Now, wait for the chamber temp to drop before turning on the
      # exhaust fan.
      #TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MAXIMUM={chamber_drop_temp}
      G4 P{((nevermore_time|int * 60) - nozzle_ooze_wait_time) * 1000}
      VEFACH_CTRL SPEED={vefach_speed}
      G4 P{(vefach_filter_time|int * 60) * 1000}
      NEVERMORE_CTRL SPEED=0
      VEFACH_CTRL SPEED=75
      TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MAXIMUM=35
      VEFACH_CTRL SPEED=0
    {% endif %}
    
    # restore speed and accel limits modified during the print
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
	  SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
	  SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
	  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity}
    
    # Reset speed and extrusion factors
    M220 S100
    M221 S100

    BED_MESH_CLEAR

    # Reset any per-filament Z offset
    SET_GCODE_OFFSET Z=0 MOVE=1

    # Disable filament sensor after print is done.
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
    
    CASELIGHTS STATE='OFF'
    M117 Print done.
    CLEAR_DISP TIMEOUT=10

    # Play some tones to signal print end
    M300 S440 P200
    M300 S660 P250
    M300 S880 P300
    M300 S220 P450

[gcode_macro SET_PRESSURE_ADVANCE]
description: Set pressure advance parameters for extruder.
rename_existing: BASE_SET_PRESSURE_ADVANCE
gcode:
    {% set extruder = params.EXTRUDER|default("")|string %}
    {% set advance = params.ADVANCE|default(0.0)|float %}
    {% set smooth_time = params.SMOOTH_TIME|default(0.0)|float %}
    {% set filament = params.FILAMENT_ID|default(0)|int %}
    {% set filament_type = params.FILAMENT_TYPE|default("")|string %}
    {% set user_vars = printer["gcode_macro USER_VARIABLES"] %}

    {% set cmd = [] %}
    {% set _dummy = cmd.append("EXTRUDER=%s" % extruder) if extruder %}
    {% if not advance %}
      {% if filament %}
        {% if filament in user_vars.filament.brands %}
          {% set advance = user_vars.filament.brands[filament].pa %}
        {% else %}
          {% set type_code = filament // 1000000 %}
          {% set type = user_vars.filament.map[type_code] %}
          {% if type in user_vars.filament.defaults.pa %}
            {% set advance = user_vars.filament.defaults.pa[type] %}
          {% endif %}
        {% endif %}
      {% elif filament_type %}
        {% if filament_type in user_vars.filament.defaults.pa %}
          {% set advance = user_vars.filament.defaults.pa[filament_type] %}
        {% endif %}
      {% endif %}
    {% endif %}

    {% set _dummy = cmd.append("ADVANCE=%s" % advance) if advance %}
    {% set _dummy = cmd.append("SMOOTH_TIME=%s" % smooth_time) if smooth_time %}
    BASE_SET_PRESSURE_ADVANCE {cmd|join(" ")}

[gcode_macro HEAT_SOAK_UNINTERRUPTIBLE]
description: Heat up and soak the chamber.
gcode:
    {% set target = params.TARGET|int %}
    {% set duration = params.DURATION|default(0)|int %}
    {% set sensor = printer["temperature_sensor chamber"] %}

    SAVE_GCODE_STATE STATE=heat_soak

    M117 "Heating chamber..."
    NEVERMORE_CTRL SPEED=75
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target}

    {% if duration %}
      M117 "Heat soaking..."
      G4 P{duration * 1000}
    {% endif %}

    CLEAR_DISP
    RESTORE_GCODE_STATE STATE=heat_soak

#
# Parametric PRIME LINE macro.
#
# Purges a set amounf of filament, then prints a nozzle priming line at the front of the bed.
# Calculates plastic flow and line size automatically based on nozzle diameter and bed size.
#
# Most of the apects of how it does things are configurable, see the "params.SOMETHING" lines in the code below.
# Full list of accepted parameters and their default values below. All of them are optional and do not have to be specified if you don't want the values changed:
#
#  PRIME_LINE
#  PRIME_LINE XPAD=0 YPAD=0 LENGTH=150 PRINT_SPEED=30 TRAVEL_SPEED=200 PURGE=8 RETRACT=1 EXTRUSION_MULTIPLIER=1.25 PRINT_HANDLE=1 HANDLE_FAN=35
#
# Careful: prints close to bed. Make sure your z-offset is correctly set and your bed mesh loaded, otherwise
# you can damage your print surface.
#
# Version 1.2
#
[gcode_macro PRIME_LINE]
description: Print an easy to remove parametric extruder priming line with a built-in handle.
gcode:
    # settings
    {% set line = {
      'x_padding'      : params.XPAD|default(0)|float,  # left/right padding around the bed the line can't print into
      'y_padding'      : params.YPAD|default(0)|float,  # top/bottom padding around the bed the line can't print into
      'initial_purge'  : params.PURGE|default(8)|int,   # mm of filament to purge before printing. set to 0 to disable
      'retract_after'  : params.RETRACT|default(1)|int, # mm of filament to recract after printing. set to 0 to disable
      'length'         : params.LENGTH|default(150)|int,
      'print_speed'    : params.PRINT_SPEED|default(30)|int,
      'travel_speed'   : params.TRAVEL_SPEED|default(200)|int,
      'extr_multi'     : params.EXTRUSION_MULTIPLIER|default(1.25)|float,  # apply to prime lines
      'overlap_percent': 80, # how much prime lines overlap each other
    } %}
    {% set handle = {
      'do_print'    : params.PRINT_HANDLE|default(1)|int,  # set to 0 to disable printing the handle
      'fan_percent' : params.HANDLE_FAN|default(40)|int,   # without fan the handle is too small and melty to print upright
      'width'       : 5.0,
      'height'      : 5.0,
      'move_away'   : 60   # how much to move the toolhead away from the printed handle once done. set 0 to disable
    } %}

    # sanity check and computed variables
    {% set max_x, max_y, nozzle_diameter = printer.toolhead.axis_maximum.x|float, printer.toolhead.axis_maximum.y|float, printer.configfile.config['extruder'].nozzle_diameter|float %}
    {% set _ = line.update({'width': nozzle_diameter * 1.25, 'height': nozzle_diameter / 2, 'length': [line.length, max_x - 2 * line.x_padding - 2]|min}) %}
    {% set _ = line.update({'e_per_mm': line.extr_multi * (line.width * line.height) / (3.1415 * (1.75/2)**2), 'x_start': max_x / 2 - line.length / 2, 'y_start': line.y_padding + range(0,5)|random})  %}

    SAVE_GCODE_STATE NAME=STATE_PRIME_LINE

    M117 Prime Line
    G90 # absolute positioning
    G0 X{line.x_start} Y{line.y_start + (handle.width / 2)|int + 1} Z{line.height} F{line.travel_speed * 60} # move to starting position
    G91 # relative positioning
    G1 E{line.initial_purge} F{5 * 60} # extrude at ~12mm3/sec
    G0 F{line.print_speed * 60} # set print speed
    G1 X{line.length} E{line.length * line.e_per_mm} # print forward line
    G0 Y{line.width * line.overlap_percent / 100} # overlap forward line
    G1 X-{line.length / 2} E{(line.length / 2) * line.e_per_mm}  # print backward line for half the length

    # print a handle for easy removal
    {% if handle.do_print != 0 and handle.width != 0 and handle.height != 0 %}
      G0 X{line.length / 2 - handle.width} Y{handle.width / 2} F{line.travel_speed * 60} # move into position for printing handle
      G0 F{line.print_speed * 60} # set print speed
      {% set saved_fan_speed = (printer['fan'].speed * 256)|int %}
      M106 S{((handle.fan_percent / 100) * 256)|int} # set part fan to desired speed
      {% for _ in range((line.height * 1000)|int, (handle.height * 1000)|int, (line.height * 1000)|int) %} # loop however many cycles it takes to print required handle height
        G1 Y{loop.cycle(-1.0, 1.0) * handle.width} E{handle.width * line.e_per_mm} # handle layer
        G0 X-{line.width * 0.2} Z{line.height} # move up and shift the layer to make the handle sloping
      {% endfor %}
      M106 S{saved_fan_speed} # restore previous part fan speed
    {% endif %}
    
    G1 E-{line.retract_after} F{50 * 60} # retract ar 50mm/sec after printing
    G0 Y{handle.move_away} F{line.travel_speed * 60}
    M117

    RESTORE_GCODE_STATE NAME=STATE_PRIME_LINE

[gcode_macro HEAT_SOAK]
description: Heat-soak the chamber by heating the bed and waiting for a period of time.
variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0
gcode:
    {% set TARGET = params.TARGET|default(0)|float %}
    {% set DURATION = (params.DURATION|default(15)|int) * 60 %}

    {% if TARGET > 0 %}
      SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
      SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
      SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
      SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

      SAVE_GCODE_STATE STATE=heat_soak
      # put the bed and nozzle where they're a safe distance apart
      {% if printer.toolhead.homed_axes != "xyz" %}
        G28
      {% endif %}
      G90
      G0 X{printer.toolhead.axis_maximum.x//2} Y{printer.toolhead.axis_maximum.y//2} Z{printer.toolhead.axis_maximum.z//2} F6000

      # run the fan to circulate air
      NEVERMORE_CTRL SPEED=35
  
      UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

      # pause the print during heat soak
      {% if printer.idle_timeout.state == "Printing" %}
        BASE_PAUSE
      {% endif %}
    {% endif %}

[gcode_macro CANCEL_HEAT_SOAK]
description: Cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

[delayed_gcode heat_soaker]
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}
    {% set sensor = printer["temperature_sensor chamber"] %}

    # update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and sensor.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
    {% endif %}

    {% if stage == "soaking" %}
        # update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% set total_mins = total_time_elapsed // 60 %}
    {% set total_secs = total_time_elapsed % 60 %}
    {% if stage in ("done", "cancel") %}
        {% if stage == "cancel" %}
            {% set stage = "done" %}
            M117 { "Heat soak cancelled after ~%dm%02ds" % (total_mins, total_secs) }
            {% if printer.pause_resume.is_paused %}
              # heat soak was cancelled -- also cancel the print
              CANCEL_PRINT
            {% endif %}
        {% else %}
            M117 { "Heat soak complete after %dm%02ds" % (total_mins, total_secs) }
            {% if printer.pause_resume_is_paused %}
              # resume / start the print
              BASE_RESUME
            {% endif %}
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        RESTORE_GCODE_STATE STATE=heat_soak
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0
    {% else %}
        {% if stage == "heating" %}
            M117 { "Heating... (%dm%02ds elapsed)" % (total_mins, total_secs) }
        {% elif stage == "soaking" %}
            {% set remain_mins = soak_time_remaining // 60 %}
            {% set remain_secs = soak_time_remaining % 60 %}
            M117 { "Soaking... (%dm%02ds remaining)" % (remain_mins, remain_secs) }
        {% endif %}

        # trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }
        # dwell for 1ms to prevent from going idle
        G4 P1
    {% endif %}