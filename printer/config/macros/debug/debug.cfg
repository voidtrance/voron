[gcode_macro NOISE_TEST]
gcode:
    {% set axis_limits = printer.toolhead.axis_maximum %}

    # Define SPEED range
    {% set speed_start = params.SPEED_START|int %}
    {% set speed_end = params.SPEED_END|default(speed_start)|int %}
    {% set speed_step = params.SPEED_STEP|default(10)|int %}
    
    # Define X position range
    {% set x_start = params.X_START|default(axis_limits.x//2)|int %}
    {% set x_end = params.X_END|default(x_start)|int %}
    {% set x_step = params.X_STEP|default(10)|int %}

    # Define Y position range
    {% set y_start = params.Y_START|default(axis_limits.y//2)|int %}
    {% set y_end = params.Y_END|default(y_start)|int %}
    {% set y_step = params.Y_STEP|default(10)|int %}

    # Define additional parameters
    {% set iterations = params.ITERS|default(10)|int %}
    {% set x_distance = params.X_DIST|default(2)|int %}
    {% set y_distance = params.Y_DIST|default(2)|int %}

    # Don't allow range ends be greater than the printer's limits
    {% set x_start = [0, x_start]|max %}
    {% set x_end = [x_end, axis_limits.x]|min %}
    {% set y_start = [0, y_start]|max %}
    {% set y_end = [y_end, axis_limits.y]|min %}
    {% set speed_end = [speed_end, printer.configfile.settings.printer.max_velocity]|min %}

    SAVE_GCODE_STATE NAME=noise_test

	  # Home and get position for comparison later:
    SMART_HOME
    SMART_QGL

    G90
    G0 Z30 F3600

    {% for reset_x in range(x_start, x_end + 1, x_step) %}
      {% for reset_y in range(y_start, y_end + 1, y_step) %}
        G90
        # Go to test position
        G0 X{reset_x} Y{reset_y} F3600
        # Relative positioning
        G91
        
        {% for speed in range(speed_start, speed_end+1, speed_step) %}
          M117 Testing speed {speed} @ {reset_x}X{reset_y}...

          # Set the speed for all subsequent moves
          G0 F{speed * 60}

          # X motion
          {% for i in range(iterations) %}
              # Left-right moves
              G0 X{x_distance}
              G0 X{x_distance * -1}
          {% endfor %}

          # Y motion
          {% for i in range(iterations) %}
              G0 Y{y_distance}
              G0 Y{y_distance * -1}
          {% endfor %}

          # Diagonal
          {% for x in [1, -1] %}
            {% for y in [1, -1] %}
              {% for i in range(iterations) %}
                G0 X{x_distance * x} Y{y_distance * y}
                G0 X{x_distance * x * -1} Y{y_distance * y * -1}
              {% endfor %}
            {% endfor %}
          {% endfor %}

  #         # Diagonal step
  #         {% set step_iters_x = axis_limits.x // x_distance %}
  #         {% set step_iters_y = (axis_limits.y - 5) // y_distance %}
  #         {% for sx in [0, axis_limits.x] %}
  #           {% for xy in [0, (axis_limits.y - 5)] %}
  #             G90
  #             G0 X{sx} Y{sy} F3600
  #             G91
  #             G0 F{speed * 60}
  #             {% for x in range(0, [step_iters_x, step_iters_y]|min) %}
  #               G0 X{x_distance * (1 if sx else -1)}
  #               G0 Y{y_distance * (1 if sy else -1)}
  #             {% endfor %}
  #           {% endfor %}
  #         {%endfor %}

          CLEAR_DISP
        {% endfor %}
      {%endfor %}
    {% endfor %}

    G28 X Y
    RESTORE_GCODE_STATE NAME=noise_test

[gcode_macro NOISE_TEST_2]
gcode:
  {% set x_start = params.X_START|float %}
  {% set y_start = params.Y_START|float %}
  {% set x_end = params.X_END|float %}
  {% set y_end = params.Y_END|float %}

  {% set iters = params.ITERS|default(2)|int %}
  {% set speed = params.SPEED|int %}

  SMART_HOME
  SMART_QGL

  G90
  G0 X{x_start} Y{y_start} Z30 F10000
  {% for x in range(iters) %}
    G0 X{x_end} Y{y_end} F{speed * 60}
    G0 X{x_start} Y{y_start}
  {% endfor %}

[gcode_macro DUMP_STATE]
gcode:
  {% set section = params.SECTION|string %}

  {% set obj = printer[section] if section else printer %}

  {% for key, value in obj.items() recursive %}
    {% if value is mapping %}
      {action_respond_info("%s%s =" % (" " * loop.depth, key))}
      {loop(value.items())}
    {% else %}
      {action_respond_info("%s%s = %s" % (" " *loop.depth, key, value))}
    {% endif %}
  {% endfor %}
