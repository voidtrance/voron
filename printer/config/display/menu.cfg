[menu __voron_main]
type: list
name: Main

### menu tune ###
[menu __voron_main __tune]
type: list
enable: {printer.print_stats.status == "printing"}
name: Tune

[menu __voron_main __tune __speed]
type: input
name: Speed: {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.speed_factor}
input_min: 0.01
input_max: 5
input_step: 0.01
realtime: True
gcode:
    M220 S{'%d' % (menu.input*100)}

[menu __voron_main __tune __flow]
type: input
name: Flow: {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.extrude_factor}
input_min: 0.01
input_max: 2
input_step: 0.01
realtime: True
gcode:
    M221 S{'%d' % (menu.input*100)}

[menu __voron_main __tune __offsetz]
type: input
name: Offset Z:{'%05.3f' % menu.input}
input: {printer.gcode_move.homing_origin.z}
input_min: -5
input_max: 5
input_step: 0.005
realtime: True
gcode:
    {% set vars = printer.save_variables.variables %}
    RESPOND TYPE=command MSG="{ 'bed surface: %s, offset: %r' % (vars.surface_names[vars.surface_selected], menu.input) }"
    SET_GCODE_OFFSET Z={ '%.3f' % menu.input } MOVE=1
    SAVE_VARIABLE VARIABLE=surface_offsets.{ vars.surface_names[vars.surface_selected] } VALUE={ '%.3f' % menu.input }

### menu sdcard ###
[menu __voron_main __sdcard]
type: list
enable: {'virtual_sdcard' in printer}
name: SD Card

[menu __voron_main __sdcard __file]
type: command
name: File: {printer.print_stats.filename}

[menu __voron_main __sdcard __load]
type: vsdlist
enable: {not printer.virtual_sdcard.file_path and printer.print_stats.state not in ("printing", "paused")}
name: Load file

[menu __voron_main __sdcard __unload]
type: command
enable: {printer.virtual_sdcard.file_path and printer.print_stats.state not in ("printing", "paused")}
name: Unload file
gcode:
  {menu.back()} SDCARD_RESET_FILE

[menu __voron_main __sdcard __start]
type: command
enable: {printer.virtual_sdcard.file_path and printer.print_stats.state not in ("printing", "paused")}
name: Start print
gcode:
    {menu.exit()}
    M24

[menu __voron_main __sdcard __pause]
type: command
enable: {printer.print_stats.state == "printing"}
name: Pause print
gcode:
  {menu.back()} PAUSE

[menu __voron_main __sdcard __resume]
type: command
enable: {printer.print_stats.state == "paused"}
name: Resume print
gcode:
    {menu.exit()}
    RESUME

[menu __voron_main __sdcard __cancel]
type: command
enable: {printer.print_stats.state == "paused" or printer.print_stats.state == "printing"}
name: Cancel print
gcode:
    {menu.exit()}
    CANCEL_PRINT

### menu control ###
[menu __voron_main __control]
type: list
name: Control

[menu __voron_main __control __home]
type: command
enable: {printer.print_stats.state not in ("printing", "paused")}
name: Home All
gcode: G28

[menu __voron_main __control __homez]
type: command
enable: {printer.print_stats.state not in ("printing", "paused")}
name: Home Z
gcode: G28 Z

[menu __voron_main __control __homexy]
type: command
enable: {printer.print_stats.state not in ("printing", "paused")}
name: Home X/Y
gcode: G28 X Y

[menu __voron_main __control __quad_gantry_level]
type: command
enable: {printer.print_stats.state not in ("printing", "paused") and ('quad_gantry_level' in printer)}
name: Quad Gantry Lvl
gcode: QUAD_GANTRY_LEVEL

[menu __voron_main __control __bed_mesh]
type: command
enable: {printer.print_stats.state not in ("printing", "paused") and ('bed_mesh' in printer)}
name: Bed Mesh
gcode: BED_MESH_CALIBRATE

[menu __voron_main __control __disable]
type: command
name: Steppers off
gcode:
    M84
    M18

### menu control fan control ###
[menu __voron_main __control __fan_control]
type: list
name: Fan Control

[menu __voron_main __control __fan_control __fanonoff]
type: input
enable: {'fan' in printer}
name: Fan: {'ON ' if menu.input else 'OFF'}
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 1
gcode:
    M106 S{255 if menu.input else 0}

[menu __voron_main __control __fan_control __fanspeed]
type: input
enable: {'fan' in printer}
name: Fan speed: {'%3d%%' % (menu.input*100)}%
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
    M106 S{'%d' % (menu.input*255)}

[menu __voron_main __control __fan_control __nevermore]
type: list
name: Nevermore Filter

[menu __voron_main __control __fan_control __nevermore __ctrl]
type: input
name: Nevermore: {"%3d%%" % (menu.input * 100)}
input: {printer["fan_generic nevermore_fan"].speed}
input_min: 0
input_max: 1.0
input_step: 0.1
gcode:
    NEVERMORE_CTRL SPEED={(menu.input * 100)|int}

[menu __voron_main __control __fan_control __exhaust]
type: list
name: Exhaust Fan

[menu __voron_main __control __fan_control __exhaust __ctrl]
type: input
name: Exhaust: {"%3d%%" % (menu.input * 100)}
input: {printer["fan_generic exhaust_fan"].speed}
input_min: 0
input_max: 1.0
input_step: 0.1
gcode:
    VEFACH_CTRL SPEED={(menu.input * 100)|int}

[menu __voron_main __control __fan_control __filter]
type: list
name: Filter Chamber

[menu __voron_main __control __fan_control __filter __temp]
type: input
name: Chamber Temperature: {menu.input}
input: {printer["gcode_macro FILTER_CHAMBER"].temp}
input_min: 0
input_max: 60
input_step: 1
gcode:
    SET_GCODE_VARIABLE MACRO=FILTER_CHAMBER VARIABLE=temp VALUE={menu.input}

[menu __voron_main __control __fan_control __filter __start]
type: input
name: Fitler Chamber: {"%3d" % (menu.input|int)}m
input: {printer["gcode_macro FILTER_CHAMBER"].exhaust_time}
input_min: 0
input_max: 90
input_step: 1
gcode:
    {% if menu.input > 0 %}
        FILTER_CHAMBER TEMP={printer["gcode_macro FILTER_CHAMBER"].temp} VENT_TIME={menu.input}
    {% else %}
        CANCEL_FILTER_CHAMBER
    {% endif %}

### menu control park ###
[menu __voron_main __control __park]
type:input 
enable: {printer.print_stats.state != "printing"}
name: Park: {printer["gcode_macro USER_VARIABLES"].macros.park_position.keys()[menu.input|int]|replace("_", " ")|upper}
input: 0
input_min: 0
input_max: {(printer["gcode_macro USER_VARIABLES"].macros.park_position|length) - 1}
input_step: 1
gcode:
    {% set park = printer["gcode_macro USER_VARIABLES"].macros.park_position %}
    {% set position = park.keys()[menu.input|int] %}
    PARK POSITION={position}

### menu control move ###
[menu __voron_main __control __movement]
type: list
name: Movement
enable: {printer.print_stats.state not in ("printing", "paused")}

[menu __voron_main __control __movement __move_10mm]
type: list
enable: {printer.print_stats.state not in ("printing", "paused")}
name: Move 10mm

[menu __voron_main __control __movement __move_10mm __axis_x]
type: input
name: Move X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: {printer.toolhead.axis_minimum.x}
input_max: {printer.toolhead.axis_maximum.x}
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __voron_main __control __movement __move_10mm __axis_y]
type: input
name: Move Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: {printer.toolhead.axis_minimum.y}
input_max: {printer.toolhead.axis_maximum.y}
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __voron_main __control __movement __move_10mm __axis_z]
type: input
enable: {printer.print_stats.state not in ("printing", "paused")}
name: Move Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: 0
input_max: {printer.toolhead.axis_maximum.z}
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __voron_main __control __movement __move_10mm __axis_e]
type: input
enable: {printer.print_stats.state not in ("printing", "paused")}
name: Move E:{'%+06.1f' % menu.input}
input: 0
input_min: -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max: {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis

### menu control move 1mm ###
[menu __voron_main __control __movement __move_1mm]
type: list
enable: {printer.print_stats.state not in ("printing", "paused")}
name: Move 1mm

[menu __voron_main __control __movement __move_1mm __axis_x]
type: input
name: Move X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: {printer.toolhead.axis_minimum.x}
input_max: {printer.toolhead.axis_maximum.x}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __voron_main __control __movement __move_1mm __axis_y]
type: input
name: Move Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: {printer.toolhead.axis_minimum.y}
input_max: {printer.toolhead.axis_maximum.y}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __voron_main __control __movement __move_1mm __axis_z]
type: input
enable: {printer.print_stats.state not in ("printing", "paused")}
name: Move Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: 0
input_max: {printer.toolhead.axis_maximum.z}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __voron_main __control __movement __move_1mm __axis_e]
type: input
enable: {printer.print_stats.state not in ("printing", "paused")}
name: Move E:{'%+06.1f' % menu.input}
input: 0
input_min: -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max: {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis

### menu control move 0.1mm ###
[menu __voron_main __control __movement __move_01mm]
type: list
enable: {printer.print_stats.state not in ("printing", "paused")}
name: Move 0.1mm

[menu __voron_main __control __move_01mm __axis_x]
type: input
name: Move X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: {printer.toolhead.axis_minimum.x}
input_max: {printer.toolhead.axis_maximum.x}
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __voron_main __control __movement __move_01mm __axis_y]
type: input
name: Move Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: {printer.toolhead.axis_minimum.y}
input_max: {printer.toolhead.axis_maximum.y}
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __voron_main __control __movement __move_01mm __axis_z]
type: input
enable: {printer.print_stats.state not in ("printing", "paused")}
name: Move Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: 0
input_max: {printer.toolhead.axis_maximum.z}
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __voron_main __control __movement __move_01mm __axis_e]
type: input
enable: {printer.print_stats.state not in ("printing", "paused")}
name: Move E:{'%+06.1f' % menu.input}
input: 0
input_min: -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max: {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis

### menu temperature ###
[menu __voron_main __temp]
type: list
name: Temperature

[menu __voron_main __temp __hotend0_target]
type: input
enable: {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name: {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 1
gcode: M104 T0 S{'%.0f' % menu.input}

[menu __voron_main __temp __hotend1_target]
type: input
enable: {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name: {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input: {printer.extruder1.target}
input_min: 0
input_max: {printer.configfile.config.extruder1.max_temp}
input_step: 1
gcode: M104 T1 S{'%.0f' % menu.input}

[menu __voron_main __temp __hotbed_target]
type: input
enable: {'heater_bed' in printer}
name: {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input: {printer.heater_bed.target}
input_min: 0
input_max: {printer.configfile.config.heater_bed.max_temp}
input_step: 1
gcode: M140 S{'%.0f' % menu.input}

[menu __voron_main __temp __preheat_pla]
type: list
name: Preheat PLA

[menu __voron_main __temp __preheat_pla __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all
gcode:
    M140 S60
    M104 S200

[menu __voron_main __temp __preheat_pla __hotend]
type: command
enable: {'extruder' in printer}
name: Preheat hotend
gcode: M104 S200

[menu __voron_main __temp __preheat_pla __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preheat hotbed
gcode: M140 S60

[menu __voron_main __temp __preheat_abs]
type: list
name: Preheat ABS

[menu __voron_main __temp __preheat_abs __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all
gcode:
    M140 S110
    M104 S245

[menu __voron_main __temp __preheat_abs __hotend]
type: command
enable: {'extruder' in printer}
name: Preheat hotend
gcode: M104 S245

[menu __voron_main __temp __preheat_abs __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preheat hotbed
gcode: M140 S110

[menu __voron_main __temp __cooldown]
type: list
name: Cooldown

[menu __voron_main __temp __cooldown __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Cooldown all
gcode:
    M104 S0
    M140 S0

[menu __voron_main __temp __cooldown __hotend]
type: command
enable: {'extruder' in printer}
name: Cooldown hotend
gcode: M104 S0

[menu __voron_main __temp __cooldown __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Cooldown hotbed
gcode: M140 S0

### menu filament ###
[menu __voron_main __filament __load]
type: command
name: Load Filament
gcode:
    LOAD_FILAMENT

[menu __voron_main __filament __unload]
type: command
name: Unload Filament
gcode:
    UNLOAD_FILAMENT

[menu __voron_main __filament __clean]
type: command
name: Clean Nozzle
gcode:
    CLEAN_NOZZLE PURGE=0

#### menu lights ###
[menu __voron_main __lights]
type: list
enable: {"neopixel case_lights" in printer}
name: Lighting
index: 8

[menu __voron_main __lights __control]
type: input
name: Lights: {printer["gcode_macro USER_VARIABLES"].hw.case_light_states[menu.input|int]}
input: {printer["gcode_macro CASELIGHTS"].value}
input_min: 0
input_max: {(printer["gcode_macro USER_VARIABLES"].hw.case_light_states|length) - 1}
input_step: 1
gcode:
    CASELIGHTS STATE={printer["gcode_macro USER_VARIABLES"].hw.case_light_states[menu.input]}

[menu __voron_main __lights __show]
type: input
name: Show: {menu.input}s
input: {printer["gcode_macro CASELIGHTS_SHOW"].timeout}
input_min: 5
input_max: 900
gcode:
    SET_GCODE_VARIABLE MACRO=CASELIGHTS_SHOW VARIABLE=timeout VALUE={menu.input}
    CASELIGHTS_SHOW

[menu __voron_main __lights __set]
type: list
name: Set Color

[menu __voron_main __lights __set __red]
type: input
name: Red: {"%.02f" % menu.input}
input: {printer["neopixel case_lights"].color_data[0][0]}
input_min: 0.0
input_max: 1.0
input_step: 0.01
realtime: True
gcode:
    {% set color = printer["neopixel case_lights"].color_data[0] %}
    SET_LED LED=case_lights RED={menu.input} GREEN={color[1]} BLUE={color[2]} WHITE={color[3]}

[menu __voron_main __lights __set __green]
type: input
name: Green: {"%.02f" % menu.input}
input: {printer["neopixel case_lights"].color_data[0][1]}
input_min: 0.0
input_max: 1.0
input_step: 0.01
realtime: True
gcode:
    {% set color = printer["neopixel case_lights"].color_data[0] %}
    SET_LED LED=case_lights RED={color[0]} GREEN={menu.input} BLUE={color[2]} WHITE={color[3]}

[menu __voron_main __lights __set __blue]
type: input
name: Blue: {"%.02f" % menu.input}
input: {printer["neopixel case_lights"].color_data[0][2]}
input_min: 0.0
input_max: 1.0
input_step: 0.01
realtime: True
gcode:
    {% set color = printer["neopixel case_lights"].color_data[0] %}
    SET_LED LED=case_lights RED={color[0]} GREEN={color[1]} BLUE={menu.input} WHITE={color[3]}

[menu __voron_main __lights __set __save]
type: command
name: Save Abient Color
gcode:
    {% set color = printer["neopixel case_lights"].color_data[0] %}
    SAVE_VARIABLE VARIABLE=caselights_ambient VALUE={"[%d,%d,%d,%d]" % (color[0]*255|int, color[1]*255|int, color[2]*255|int, color[3]*255|int)}

### menu setup ###
[menu __voron_main __setup]
type: list
enable: {printer.print_stats.state not in ("printing", "paused")}
name: Setup

[menu __voron_main __setup __save_config]
type: command
name: Save config
gcode: SAVE_CONFIG

[menu __voron_main __setup __restart]
type: list
name: Restart

[menu __voron_main __setup __restart __host_restart]
type: command
enable: {printer.print_stats.state not in ("printing", "paused")}
name: Restart host
gcode: RESTART

[menu __voron_main __setup __restart __firmware_restart]
type: command
enable: {printer.print_stats.state not in ("printing", "paused")}
name: Restart FW
gcode: FIRMWARE_RESTART

[menu __voron_main __setup __restart __host_shutdown]
type: command
enable: {printer.print_stats.state not in ("printin", "paused")}
name: Shutdown host
gcode:
    {action_call_remote_method("shutdown_machine")}

[menu __voron_main __setup __tuning]
type: list
name: PID tuning

[menu __voron_main __setup __tuning __hotend_pid_tuning]
type: command
enable: {(printer.print_stats.state not in ("printing", "paused")) and ('extruder' in printer)}
name: Tune Hotend PID
gcode: PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1

[menu __voron_main __setup __tuning __hotbed_pid_tuning]
type: command
enable: {(printer.print_stats.state not in ("printing", "paused")) and ('heater_bed' in printer)}
name: Tune Hotbed PID
gcode: PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1

[menu __voron_main __setup __dump]
type: command
name: Dump parameters
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s"
                               % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}

# Difference bed surfaces may require different Z offsets.
# Rather than having to manually set the Z offsets for every single
# bed surface, save the various offsets in to persistant user-defined
# variables.
#
# This way, the appropriate Z offset can be recalled/set by referencing
# the name of the surface being used.
#
# This file profiles macros and menu entries for working with surface
# Z offsets.
#
# (All of this should become un-necessary with Klicky and Auto-Z.)
#
# In order to define a new bed surface, the following needs to be done:
#    1. Add the bed surface name to surface_names in variables.cfg.
#    2. Add a new variable of the form:
#           surface_offsets.<surface name> = 0.000
#       in variables.cfg.
#    3. Using the macros/menu tune the Z offset for the new surface.

# Choose a bed surface from a pre-configured list
[menu __voron_main __setup __surface]
type: list
name: Bed Surface

[menu __voron_main __setup __surface __bed_surface]
type: input
name: Bed: { printer.save_variables.variables.surface_names[menu.input|int] }
input: { printer.save_variables.variables.surface_selected }
input_min: 0
input_max: { (printer.save_variables.variables.surface_names|length) - 1 }
input_step: 1
gcode:
    SAVE_VARIABLE VARIABLE=surface_selected VALUE={menu.input|int}

# Tunes the Z offset from the setup menu, saves the offset
# can be performed while not actively printing
[menu __voron_main __setup __surface __offsetz]
type: input
name: Offset Z:{ '%05.3f' % menu.input }
input: { printer.save_variables.variables["surface_offsets." + printer.save_variables.variables.surface_names[printer.save_variables.variables.surface_selected]]|float }
input_min: -5
input_max: 5
input_step: 0.005
realtime: True
gcode:
    {% set vars = printer.save_variables.variables %}
    RESPOND TYPE=command MSG="{ 'bed surface: %s, offset: %r' % (vars.surface_names[vars.surface_selected], menu.input) }"
    SET_GCODE_OFFSET Z={ '%.3f' % menu.input } MOVE={ 1 if printer.toolhead.homed_axes == 'XYZ' else 0 }
    SAVE_VARIABLE VARIABLE=surface_offsets.{ vars.surface_names[vars.surface_selected] } VALUE={ '%.3f' % menu.input }
